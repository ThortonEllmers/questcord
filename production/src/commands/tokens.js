const { SlashCommandBuilder, EmbedBuilder } = require('discord.js');
const { db } = require('../utils/store_sqlite');
const config = require('../utils/config');
const { getUserPrefix, isDev } = require('../utils/roles');

module.exports = {
  data: new SlashCommandBuilder()
    .setName('tokens')
    .setDescription('Server tokens')
    .addSubcommand(sc=>sc
      .setName('buy')
      .setDescription('Where to buy more tokens'))
    .addSubcommand(sc=>sc
      .setName('balance')
      .setDescription("Show this server's token balance"))
    .addSubcommand(sc=>sc
      .setName('add')
      .setDescription('Add tokens to a server (Developer only)')
      .addIntegerOption(o=>o.setName('amount').setDescription('Number of tokens to add').setRequired(true))
      .addStringOption(o=>o.setName('serverid').setDescription('Target server ID (defaults to this server)').setRequired(false))
    )
    .addSubcommand(sc=>sc
      .setName('remove')
      .setDescription('Remove tokens from a server (Developer only)')
      .addIntegerOption(o=>o.setName('amount').setDescription('Number of tokens to remove').setRequired(true))
      .addStringOption(o=>o.setName('serverid').setDescription('Target server ID (defaults to this server)').setRequired(false))
    ),
  async execute(interaction){
    const userPrefix = await getUserPrefix(interaction.client, interaction.user);
    const sub = interaction.options.getSubcommand();

    if (sub === 'buy'){
      const url = (config?.billing && config.billing.checkoutUrl) ||
                  (config?.biome && config.biome.purchaseUrl) ||
                  (config?.premium && config.premium.purchaseUrl) || null;
      
      if (url){
        const embed = new EmbedBuilder()
          .setTitle('ü™ôüíé **TOKEN MARKETPLACE** üíéü™ô')
          .setDescription('üè™ *Unlock premium server features with official QuestCord tokens* ‚ö°')
          .setColor(0xFFD700)
          .setAuthor({ 
            name: `${userPrefix} - Token Merchant`,
            iconURL: interaction.user.displayAvatarURL() 
          })
          .addFields(
            {
              name: 'üõí **Purchase Methods**',
              value: `üåê [Visit Web Store](${require('../utils/config')?.web?.publicBaseUrl || ''}/store?guildId=${interaction.guild?.id || ''})\nüîó [Direct Purchase](${url})`,
              inline: true
            },
            {
              name: 'üí≥ **Payment Options**',
              value: '‚Ä¢ Credit/Debit Cards\n‚Ä¢ PayPal & Digital Wallets\n‚Ä¢ Cryptocurrency (select)\n‚Ä¢ Bank Transfer',
              inline: true
            },
            {
              name: '‚ö° **Instant Delivery**',
              value: '‚Ä¢ Tokens credited immediately\n‚Ä¢ Automatic server notification\n‚Ä¢ Receipt via email\n‚Ä¢ 24/7 support available',
              inline: true
            },
            {
              name: 'üéØ **Token Applications**',
              value: 'üåç **Biome Changes** - Transform your server environment\nüìç **Server Relocation** - Move to new regions\nüé® **Premium Customization** - Exclusive features\nüöÄ **Advanced Tools** - Enhanced server management\nüíé **Special Events** - Exclusive access',
              inline: false
            },
            {
              name: 'üéÅ **Bundle Offers**',
              value: '‚Ä¢ **Starter Pack** - 5 tokens + bonus features\n‚Ä¢ **Growth Bundle** - 15 tokens + premium perks\n‚Ä¢ **Enterprise** - 50 tokens + priority support\n‚Ä¢ **Bulk Discount** - Save 20% on 100+ tokens',
              inline: false
            }
          )
          .setFooter({ 
            text: `üíé Secure payments ‚Ä¢ Instant delivery ‚Ä¢ Premium support ‚Ä¢ QuestCord Marketplace`,
            iconURL: interaction.client.user.displayAvatarURL()
          })
          .setTimestamp();

        return interaction.reply({ embeds: [embed], ephemeral: true });
      } else {
        const embed = new EmbedBuilder()
          .setTitle('üö´ Store Unavailable')
          .setDescription('Token purchases are not currently available')
          .setColor(0xFF6B6B)
          .setAuthor({ 
            name: `${userPrefix}`,
            iconURL: interaction.user.displayAvatarURL() 
          })
          .addFields({
            name: '‚ö†Ô∏è Notice',
            value: 'The token store is temporarily unavailable. Please try again later.',
            inline: false
          })
          .setFooter({ 
            text: `Contact support if you need assistance ‚Ä¢ QuestCord`,
            iconURL: interaction.client.user.displayAvatarURL()
          })
          .setTimestamp();

        return interaction.reply({ embeds: [embed], ephemeral: true });
      }
    }

    if (sub === 'balance'){
      const row = db.prepare('SELECT tokens FROM servers WHERE guildId=?').get(interaction.guild.id) || {};
      const n = row.tokens ?? 0;
      
      // Determine wealth tier based on token count
      let balanceTier, balanceIcon, balanceColor;
      if (n >= 100) {
        balanceTier = 'ENTERPRISE ACCOUNT';
        balanceIcon = 'üëë';
        balanceColor = 0xFFD700;
      } else if (n >= 50) {
        balanceTier = 'PREMIUM TREASURY';
        balanceIcon = 'üíé';
        balanceColor = 0x9B59B6;
      } else if (n >= 25) {
        balanceTier = 'ADVANCED WALLET';
        balanceIcon = 'üèÜ';
        balanceColor = 0x3498DB;
      } else if (n >= 10) {
        balanceTier = 'ESTABLISHED ACCOUNT';
        balanceIcon = '‚≠ê';
        balanceColor = 0x2ECC71;
      } else if (n >= 5) {
        balanceTier = 'GROWING TREASURY';
        balanceIcon = 'üåü';
        balanceColor = 0xF39C12;
      } else if (n >= 1) {
        balanceTier = 'STARTER ACCOUNT';
        balanceIcon = 'üî∞';
        balanceColor = 0x00AE86;
      } else {
        balanceTier = 'EMPTY TREASURY';
        balanceIcon = 'üì≠';
        balanceColor = 0x95A5A6;
      }

      const embed = new EmbedBuilder()
        .setTitle(`${balanceIcon}ü™ô **SERVER TOKEN TREASURY** ü™ô${balanceIcon}`)
        .setDescription('üí∞ *Your server\'s premium currency for exclusive features* ‚ö°')
        .setColor(balanceColor)
        .setAuthor({ 
          name: `${userPrefix} - ${balanceTier}`,
          iconURL: interaction.user.displayAvatarURL() 
        })
        .addFields(
          {
            name: 'üí≥ **Current Balance**',
            value: `**${n.toLocaleString()}** tokens\n${balanceIcon} ${balanceTier}`,
            inline: true
          },
          {
            name: 'üìä **Account Status**',
            value: n > 0 ? 
              `‚úÖ **Active Treasury**\nReady for premium features` :
              `üì≠ **Empty Treasury**\nTokens needed for features`,
            inline: true
          },
          {
            name: 'üöÄ **Quick Actions**',
            value: n > 0 ?
              'üåç Change biome\nüìç Relocate server\nüé® Customize server' :
              'üõí Purchase tokens\nüí∞ Fund treasury\nüîì Unlock features',
            inline: true
          }
        );

      if (n > 0) {
        embed.addFields({
          name: 'üíé **Available Features**',
          value: `‚Ä¢ **Biome Changes** (1 token each)\n‚Ä¢ **Server Relocation** (varies by distance)\n‚Ä¢ **Premium Customization** (1-5 tokens)\n‚Ä¢ **Special Events** (seasonal pricing)\n‚Ä¢ **Advanced Tools** (varies by feature)`,
          inline: false
        });
      } else {
        embed.addFields({
          name: 'üõí **Get Started**',
          value: `‚Ä¢ Use \`/tokens buy\` to purchase\n‚Ä¢ Visit the web store for bundles\n‚Ä¢ Start with the **Starter Pack** (5 tokens)\n‚Ä¢ Unlock amazing server features!`,
          inline: false
        });
      }

      embed
        .setFooter({ 
          text: `üè™ Use /tokens buy to purchase more tokens ‚Ä¢ QuestCord Treasury`,
          iconURL: interaction.client.user.displayAvatarURL()
        })
        .setTimestamp();

      return interaction.reply({ embeds: [embed], ephemeral: true });
    }

    if (sub === 'add'){
      if (!await isDev(interaction.client, interaction.user.id)){
        return interaction.reply({ content: `${userPrefix} Only **Developers** can add tokens.`, ephemeral: true });
      }
      const amt = interaction.options.getInteger('amount');
      const n = Math.max(1, (amt|0));
      const gid = (interaction.options.getString('serverid') || interaction.guild?.id || '').trim();
      if (!gid) return interaction.reply({ content: `${userPrefix} Missing server ID.`, ephemeral: true });
      const exists = db.prepare('SELECT 1 FROM servers WHERE guildId=?').get(gid);
      if (!exists){
        return interaction.reply({ content: `${userPrefix} Server not found: \`${gid}\``, ephemeral: true });
      }
      db.prepare('UPDATE servers SET tokens = COALESCE(tokens,0) + ? WHERE guildId=?').run(n, gid);
      const after = db.prepare('SELECT tokens FROM servers WHERE guildId=?').get(gid)?.tokens ?? 0;
      return interaction.reply({ content: `${userPrefix} Added **${n}** token(s) to \`${gid}\`. New balance: **${after}**.`, ephemeral: false });
    }

    if (sub === 'remove'){
      if (!await isDev(interaction.client, interaction.user.id)){
        return interaction.reply({ content: `${userPrefix} Only **Developers** can remove tokens.`, ephemeral: true });
      }
      const amt = interaction.options.getInteger('amount');
      const n = Math.max(1, (amt|0));
      const gid = (interaction.options.getString('serverid') || interaction.guild?.id || '').trim();
      if (!gid) return interaction.reply({ content: `${userPrefix} Missing server ID.`, ephemeral: true });

      const exists = db.prepare('SELECT 1 FROM servers WHERE guildId=?').get(gid);
      if (!exists){
        return interaction.reply({ content: `${userPrefix} Server not found: \`${gid}\``, ephemeral: true });
      }

      db.prepare('UPDATE servers SET tokens = MAX(0, COALESCE(tokens,0) - ?) WHERE guildId=?').run(n, gid);
      const after = db.prepare('SELECT tokens FROM servers WHERE guildId=?').get(gid)?.tokens ?? 0;
      return interaction.reply({ content: `${userPrefix} Removed **${n}** token(s) from \`${gid}\`. New balance: **${after}**.`, ephemeral: false });
    }
  }
};
